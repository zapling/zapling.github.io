{"version":3,"sources":["BootSequence.jsx","components/TerminalCommand.jsx","SSHSequence.jsx","index.jsx"],"names":["BootSequence","cursor","onDone","useState","initDone","setInitDone","className","delayGenerator","onTypingDone","text","status","map","task","index","data","toUpperCase","Delay","ms","TerminalCommand","remoteConnection","children","getTerminalPrefix","undefined","style","display","SSHSequence","asciiArt","printAsciiArt","commandCatPalmText","printCatPalmTxtCommand","palmTxt","printPalmTxt","PalmTxt","href","target","rel","AsciiArt","Terminal","show","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a51bd26.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Typist from 'react-typist';\nimport './bootSequence.css'\n\nexport const BootSequence = ({ cursor, onDone }) => {\n    const [initDone, setInitDone] = useState(false);\n\n    const bootTasks = [\n        {text: 'Love for tacos',         status: 'ok'},\n        {text: 'Red bull junkie',        status: 'ok'},\n        {text: 'Love for coffe',         status: 'error'},\n        {text: 'Love for dogs and cats', status: 'ok'},\n        {text: 'Speghetti code',         status: 'error'}\n    ];\n\n    return (\n        <div className=\"boot\">\n            <Typist cursor={cursor} delayGenerator={() => 1} onTypingDone={() => setInitDone(true)}>\n                Boot sequence\n                <ul>\n                    { bootTasks.map((task, index) => (\n                        <li key={index}>\n                            [\n                            <span data={task.status === 'ok' ? 0 : 1}>\n                                { task.status.toUpperCase() }\n                            </span>\n                            ]\n                            &nbsp;\n                            { task.text }\n                        </li>\n                    ))}\n                </ul>\n            </Typist>\n\n            { initDone && (\n                <Typist cursor={cursor} onTypingDone={() => onDone()}>\n                    ..........\n                    <Typist.Delay ms={500} />\n                </Typist>\n            ) }\n        </div>\n    );\n}\n","import Typist from \"react-typist\";\n\nexport const TerminalCommand = ({remoteConnection, cursor, onTypingDone, children}) => {\n    return (\n        <>\n            { getTerminalPrefix(remoteConnection) }\n            { children !== undefined &&\n                <Typist style={{display: \"inline\"}} cursor={cursor} delayGenerator={() => 30 } onTypingDone={onTypingDone}>\n                    { children }\n                </Typist>\n            }\n        </>\n    );\n}\n\nconst getTerminalPrefix = (remoteConnection) => {\n    return (\n        <span className=\"prefix\">\n            <span className=\"host\">me@{remoteConnection ? 'andreaspalm.se' : 'local'}</span>:\n            <span className=\"tilda\">~</span>\n            <span className=\"dollar\">$</span>&nbsp;\n        </span>\n    );\n}\n","import React, { useState } from 'react';\nimport Typist from 'react-typist';\nimport { TerminalCommand } from './components/TerminalCommand';\nimport './SSHSequence.css';\n\nexport const SSHSequence = ({cursor}) => {\n    const [asciiArt, printAsciiArt] = useState(false);\n    const [commandCatPalmText, printCatPalmTxtCommand] = useState(false);\n    const [palmTxt, printPalmTxt] = useState(false);\n\n    return (\n        <div className=\"terminal\">\n            <TerminalCommand remoteConnection={false} cursor={cursor} onTypingDone={() => printAsciiArt(true)}>\n                ssh andreaspalm.se\n            </TerminalCommand>\n\n            { asciiArt && <AsciiArt cursor={cursor} onTypingDone={() => printCatPalmTxtCommand(true)} /> }\n\n            { commandCatPalmText && (\n                <TerminalCommand remoteConnection={true} cursor={cursor} onTypingDone={() => printPalmTxt(true)}>\n                    cat palm.txt\n                </TerminalCommand>\n            )}\n\n            { palmTxt && <PalmTxt cursor={cursor} /> }\n        </div>\n    );\n}\n\nconst PalmTxt = ({cursor, onTypingDone}) => {\n    return (\n        <div className=\"palmTxt\">\n            <Typist cursor={cursor} delayGenerator={() => 10} onTypingDone={onTypingDone}>\n                <p>Hi there! I am Andreas Palm.</p>\n                <p>\n                  I currently work as a <span className=\"highlight\">[Software Developer]</span> at <a href=\"https://zimpler.com\" target=\"_blank\" rel=\"noopener noreferrer\">[Zimpler]</a>.\n                </p>\n                <p>\n                  Working with code and learning new things is my passion, and I spend most of my days in a terminal.\n                  I see myself as a <span className=\"highlight\">back-end</span> developer, but I also know my way around a front-end.\n                  I'm currently exploring <span className=\"highlight\">Go</span>, but have previous experience in <span className=\"highlight\">PHP</span> and <span className=\"highlight\">Python</span>.\n                </p>\n                <p>\n                  Navigating the seas of the web is nothing new to me and I travel reguarly between servers both via SSH and HTTP(S).\n                </p>\n                <p>\n                  I'm always interested in hearing about new opportunities and challenges.\n                  Don't hesitate to contact me at <span className=\"highlight\">me[a]andreaspalm.se</span>\n                </p>\n                <p>Here is some helpful hyperlinks ⤦️</p>\n                <ul>\n                    <li>\n                        <a href=\"https://linkedin.com/in/palm-andreas\"\n                           target=\"_blank\"\n                           rel=\"noopener noreferrer\"\n                        >\n                            [LinkedIn]\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"https://github.com/zapling\"\n                           target=\"_blank\"\n                           rel=\"noopener noreferrer\"\n                        >\n                            [Github]\n                        </a>\n                    </li>\n                </ul>\n                <p>Cheers!</p>\n                <TerminalCommand remoteConnection={false} cursor={cursor} />\n                &nbsp;\n            </Typist>\n        </div>\n    );\n}\n\nconst AsciiArt = ({cursor, onTypingDone}) => {\n    return (\n        <Typist cursor={cursor} delayGenerator={() => 1 } onTypingDone={onTypingDone}>\n            <pre>\n                <span className=\"leaves\">\n                    {'            '}___{'   '}____<br/>\n                    {'          '}/' --;^/ ,-_\\       <span className=\"sun\">\\ | /</span><br/>\n                    {'         '}/ /--o\\ o-\\   \\     <span className=\"sun\">--(_)--</span><br/>\n                    {'        '}/-/-/|o<span className=\"bark\">|-|</span>\\-\\|  \\{'     '}<span className=\"sun\">/ | \\</span><br/>\n                    {'         '}'`  ` <span className=\"bark\">|-|</span> `` '<br/>\n                    {'               '}<span className=\"bark\">|-|</span><br/>\n                    {'               '}<span className=\"bark\">|-|</span><span className=\"human\">O</span><br/>\n                    {'               '}<span className=\"bark\">|-</span><span className=\"human\">(\\\\,__</span><br/>\n                    {'            '}<span className=\"sand\">...</span><span className=\"bark\">|-|</span><span className=\"human\">\\\\--,\\\\_</span><span className=\"sand\">....<br/>\n                    {'        '},;;;;;;;;;;;;;;;;;;;;;;;;,.</span><br/>\n                    {'  '}<span className=\"water\">~~</span><span className=\"sand\">,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,</span><span className=\"water\">~~~<br/>\n                    {'  '}~</span><span className=\"sand\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,</span><span className=\"water\">~~~~~</span>\n                </span>\n            </pre>\n        </Typist>\n    );\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {BootSequence} from './BootSequence.jsx';\nimport {SSHSequence} from './SSHSequence.jsx';\nimport './index.css';\n\nconst Terminal = () => {\n    const [initDone, setInitDone] = useState(false);\n\n    const cursor = {show: false};\n\n    return (\n        <div>\n            { !initDone\n                ? <BootSequence cursor={cursor} onDone={() => setInitDone(true)} />\n                : <SSHSequence cursor={cursor} />\n            }\n        </div>\n    );\n}\n\nReactDOM.render(\n    <Terminal />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}