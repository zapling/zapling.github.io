{"version":3,"sources":["bootSequence.jsx","SSHSequence.jsx","index.jsx"],"names":["BootSequence","props","state","section","text","status","num","Math","floor","random","dots","i","tasks","this","getBootTasks","getDots","className","cursor","delayGenerator","onTypingDone","setState","map","task","data","onDone","Delay","ms","React","Component","SSHSequence","sections","push","ssh","server","getTerminalPrefix","style","display","typeSection","includes","getAsciiArt","href","target","rel","Terminal","sequence","show","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b61c6e39.chunk.js","sourcesContent":["import React from 'react';\nimport Typist from 'react-typist';\nimport './bootSequence.css'\n\nexport default class BootSequence extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            section: 0\n        };\n    }\n\n    getBootTasks() {\n        return [\n            {text: 'Love for tacos',         status: 0},\n            {text: 'Red bull junkie',        status: 0},\n            {text: 'Love for coffe',         status: 1},\n            {text: 'Love for dogs and cats', status: 0},\n            {text: 'Speghetti code',         status: 1}\n        ];\n    }\n\n    getDots() {\n        const num = Math.floor(Math.random() * (10 - 3 + 1)) + 3;\n\n        let dots=\"\";\n        for (let i = 0; i < num; i++) {\n            dots = dots + \".\";\n        }\n\n        return dots;\n    }\n\n    render() {\n        const tasks = this.getBootTasks();\n        const dots = this.getDots();\n\n        return (\n            <div className=\"boot\">\n                <Typist\n                    cursor={this.props.cursor}\n                    delayGenerator={() => 1 }\n                    onTypingDone={() => this.setState({section: 1})}\n                >\n                    Boot sequence\n                    <ul>\n                        {tasks.map(task => (\n                            <li key={task.text}>\n                                [ <span data={task.status}>{task.status === 0 ? 'OK' : 'ERROR'}</span> ] {task.text}\n                            </li>\n                        ))}\n                    </ul>\n                </Typist>\n\n                { this.state.section === 1 ? (\n                    <Typist\n                        cursor={this.props.cursor}\n                        delayGenerator={() => 100}\n                        onTypingDone={this.props.onDone}\n                    >\n                        { dots }\n                        <Typist.Delay ms={500} />\n                    </Typist>\n                ) : null }\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Typist from 'react-typist';\nimport './SSHSequence.css';\n\nexport default class SSHSequence extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sections: []\n        }\n    }\n\n    typeSection(section) {\n        let sections = this.state.sections;\n        sections.push(section);\n        this.setState({sections: sections});\n    }\n\n    getTerminalPrefix(ssh=false) {\n        let server = ssh === true ? 'andreaspalm.se' : 'local';\n        return (\n            <span className=\"prefix\">\n                <span className=\"host\">me@{server}</span>:\n                <span className=\"tilda\">~</span>\n                <span className=\"dollar\">$</span>&nbsp;\n            </span>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"terminal\">\n                {this.getTerminalPrefix()}\n                <Typist\n                    style={{display: \"inline\"}}\n                    cursor={this.props.cursor}\n                    delayGenerator={() => 30 }\n                    onTypingDone={() => this.typeSection('ascii_art')}\n                >\n                    ssh andreaspalm.se\n                </Typist>\n\n                { this.state.sections.includes('ascii_art') ? (\n                    <Typist\n                        cursor={this.props.cursor}\n                        delayGenerator={() => 1 }\n                        onTypingDone={() => this.typeSection('palm.txt') }\n                    >\n                        { this.getAsciiArt() }\n                    </Typist>\n                ) : null}\n\n                { this.state.sections.includes('palm.txt') ? (\n                    <div>\n                        {this.getTerminalPrefix(true)}\n                        <Typist\n                            cursor={this.props.cursor}\n                            delayGenerator={() => 30}\n                            onTypingDone={() => this.typeSection('content')}\n                        >\n                            <Typist.Delay ms={700} />\n                            cat palm.text\n                        </Typist>\n                    </div>\n                ) : null}\n\n                { this.state.sections.includes('content') ? (\n                    <div className=\"palmTxt\">\n                        <Typist\n                            cursor={this.props.cursor}\n                            delayGenerator={() => 10}\n                            onTypingDone={() => this.typeSection('end')}\n                        >\n                            <p>Hi there! I am Andreas Palm.</p>\n                            <p>\n                                I'm currently a <span className=\"highlight\">[Software Developer]</span> at <a href=\"https://zimpler.com\" target=\"_blank\" rel=\"noopener noreferrer\">[Zimpler]</a>.\n                            </p>\n                            <p>\n                                I love working with code and learning new things, and I spend most of my days in the terminal.\n                                I'm a <span className=\"highlight\">back-end</span> developer currently exploring <span className=\"highlight\">Go</span>, with previous experience in <span className=\"highlight\">PHP</span> and <span className=\"highlight\">Python</span>.\n                            </p>\n                            <p>\n                              Navigating the seas of the web is nothing new to me and I travel reguarly between servers both via SSH and HTTP(S).\n                            </p>\n                            <p>\n                              I'm always interested in opportunities and challenges to make me an even better coder.\n                                Don't hesitate to contact me at <span className=\"highlight\">me[a]andreaspalm.se</span>\n                                , feel free to encrypt your message if you feel sneaky <a className=\"gpg\" href=\"public_key.txt\" target=\"_blank\" rel=\"noopener noreferrer\">[GPG Key]</a>.\n                            </p>\n                            <p>Here is some hyperlinks ⤦️</p>\n                            <ul>\n                                <li>\n                                    <a href=\"https://linkedin.com/in/palm-andreas\"\n                                       target=\"_blank\"\n                                       rel=\"noopener noreferrer\"\n                                    >\n                                        [LinkedIn]\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href=\"https://github.com/zapling\"\n                                       target=\"_blank\"\n                                       rel=\"noopener noreferrer\"\n                                    >\n                                        [Github]\n                                    </a>\n                                </li>\n                            </ul>\n                            <p>Cheers!</p>\n                        </Typist>\n                    </div>\n                ) : null }\n\n                { this.state.sections.includes('end') ? (\n                    <div>\n                        {this.getTerminalPrefix(true)}\n                    </div>\n                ) : null }\n            </div>\n        );\n    }\n\n    getAsciiArt() {\n        return (\n            <pre>\n                <span className=\"leaves\">\n                    {'            '}___{'   '}____<br/>\n                    {'          '}/' --;^/ ,-_\\       <span className=\"sun\">\\ | /</span><br/>\n                    {'         '}/ /--o\\ o-\\   \\     <span className=\"sun\">--(_)--</span><br/>\n                    {'        '}/-/-/|o<span className=\"bark\">|-|</span>\\-\\|  \\{'     '}<span className=\"sun\">/ | \\</span><br/>\n                    {'         '}'`  ` <span className=\"bark\">|-|</span> `` '<br/>\n                    {'               '}<span className=\"bark\">|-|</span><br/>\n                    {'               '}<span className=\"bark\">|-|</span><span className=\"human\">O</span><br/>\n                    {'               '}<span className=\"bark\">|-</span><span className=\"human\">(\\\\,__</span><br/>\n                    {'            '}<span className=\"sand\">...</span><span className=\"bark\">|-|</span><span className=\"human\">\\\\--,\\\\_</span><span className=\"sand\">....<br/>\n                    {'        '},;;;;;;;;;;;;;;;;;;;;;;;;,.</span><br/>\n                    {'  '}<span className=\"water\">~~</span><span className=\"sand\">,;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,</span><span className=\"water\">~~~<br/>\n                    {'  '}~</span><span className=\"sand\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,</span><span className=\"water\">~~~~~</span>\n                </span>\n            </pre>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BootSequence from './bootSequence.jsx';\nimport SSHSequence from './SSHSequence.jsx';\nimport './index.css';\n\nclass Terminal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            sequence: 0,\n            cursor: {\n                show: false\n            }\n        }\n    }\n\n    render() {\n        switch (this.state.sequence) {\n            case 0: // Boot Sequence\n                return (\n                    <BootSequence\n                        cursor={this.state.cursor}\n                        onDone={() => this.setState({sequence: 1})}\n                    />\n                );\n            case 1: // SSH Sequence\n            default:\n                return (\n                    <SSHSequence cursor={this.state.cursor} />\n                );\n        }\n    }\n}\n\nReactDOM.render(\n    <Terminal />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}